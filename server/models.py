from typing import List, Optional, Literal
from pydantic import BaseModel, Field
from uuid import uuid4


class ExecuteRequest(BaseModel):
    """Request model for task execution."""
    task: str = Field(..., description="Natural language task description")
    api_key: Optional[str] = Field(None, description="API key for LLM provider")
    provider: Literal["mock", "anthropic", "openai"] = Field(
        "mock",
        description="LLM provider to use"
    )


class ActionStep(BaseModel):
    """Single action step in a plan."""
    action: Literal["navigate", "waitFor", "click", "type", "press", "query", "switchTab", "download"]
    payload: dict = Field(default_factory=dict)


class Task(BaseModel):
    """Task model for tracking execution."""
    task_id: str = Field(default_factory=lambda: str(uuid4()))
    description: str
    status: Literal["planning", "processing", "verifying", "completed", "failed"] = "planning"
    plan: List[dict] = Field(default_factory=list)
    steps_executed: int = 0
    verification_result: str = ""
    api_key: Optional[str] = None
    provider: str = "mock"


class ActionPlan(BaseModel):
    """Action plan generated by LLM."""
    steps: List[ActionStep]
    generated_by: Literal["mock", "anthropic", "openai"] = "mock"