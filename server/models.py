from typing import List, Optional, Literal, Dict, Any
from pydantic import BaseModel, Field
from uuid import uuid4
from datetime import datetime


class ExecuteRequest(BaseModel):
    """Request model for task execution."""
    task: str = Field(..., description="Natural language task description", min_length=1)


class ActionStep(BaseModel):
    """Single action step in a plan."""
    action: Literal[
        "navigate", "waitFor", "click", "type", "press", 
        "query", "switchTab", "download", "uploadFile",
        "getPageInfo", "getInteractiveElements", "smartClick", "smartType",
        "captureScreenshot"
    ]
    payload: Dict[str, Any] = Field(default_factory=dict)


class LogEntry(BaseModel):
    """Single log entry."""
    timestamp: str
    type: Literal["info", "success", "warning", "error", "step"]
    message: str
    details: Optional[str] = None


class Task(BaseModel):
    """Task model for tracking execution."""
    task_id: str = Field(default_factory=lambda: str(uuid4()))
    description: str = Field(..., min_length=1)
    status: Literal["planning", "replanning", "processing", "verifying", "completed", "failed"] = "planning"
    plan: List[Dict[str, Any]] = Field(default_factory=list)
    steps_executed: int = Field(default=0, ge=0)
    retry_count: int = Field(default=0, ge=0)
    verification_result: str = ""
    api_key: Optional[str] = Field(default=None, exclude=True)  # Don't expose in API
    current_step: Optional[Dict[str, Any]] = None
    logs: List[Dict[str, Any]] = Field(default_factory=list)
    
    def add_log(self, log_type: str, message: str, details: str = "") -> None:
        """Add a log entry with timestamp."""
        self.logs.append({
            "timestamp": datetime.now().isoformat(),
            "type": log_type,
            "message": message,
            "details": details
        })
    
    class Config:
        json_schema_extra = {
            "example": {
                "task_id": "123e4567-e89b-12d3-a456-426614174000",
                "description": "Search for AI papers on Google",
                "status": "processing",
                "steps_executed": 2,
                "retry_count": 0
            }
        }


class ActionPlan(BaseModel):
    """Action plan generated by LLM with structured output."""
    action: str = Field(..., description="Action type to execute")
    payload: Dict[str, Any] = Field(default_factory=dict, description="Action parameters")
    reasoning: str = Field(..., description="Why this action was chosen")
    expected_outcome: str = Field(..., description="What should happen after this action")
    task_complete: bool = Field(default=False, description="Whether the task is already complete")
    
    class Config:
        json_schema_extra = {
            "example": {
                "action": "smartClick",
                "payload": {"selector": "#search-button"},
                "reasoning": "Need to submit the search query",
                "expected_outcome": "Search results page loads",
                "task_complete": False
            }
        }


class VerificationResult(BaseModel):
    """Result of action verification."""
    success: bool = Field(..., description="Whether the action succeeded")
    confidence: float = Field(..., ge=0.0, le=1.0, description="Confidence level (0-1)")
    message: str = Field(..., description="Explanation of verification result")
    
    class Config:
        json_schema_extra = {
            "example": {
                "success": True,
                "confidence": 0.95,
                "message": "Search box now contains the query text as expected"
            }
        }


class PageState(BaseModel):
    """Current state of the browser page."""
    url: str
    title: str
    elements: List[Dict[str, Any]] = Field(default_factory=list)
    screenshot: Optional[str] = None  # Base64 encoded
    
    class Config:
        json_schema_extra = {
            "example": {
                "url": "https://google.com",
                "title": "Google",
                "elements": [
                    {
                        "type": "input",
                        "id": "search-box",
                        "placeholder": "Search"
                    }
                ]
            }
        }